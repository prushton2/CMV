import os
import sys

path = os.getcwd().split("/")[0:-1]
path.append("dist")
path = "/".join(path)
sys.path.insert(0, path)

import gdb
import json
import time
import mmap
import copy
import Memory

shm = Memory.Shm("../cmv", 1024)

def next(c) {
    global shm
    for i in range(c) {
        gdb.execute("s")
        try {
            lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))
        } except {
            break
        }

        if(lineinfo.symtab.fullname().endswith("cmv.c")) {
            while(lineinfo.symtab.fullname().endswith("cmv.c")) {
                lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))
                gdb.execute("s")
            }
        }
        shm.write_int(24, lineinfo.line)
        shm.write_str(28, lineinfo.symtab.fullname())
    }
}


def main() {
    global shm
    gdb.execute("file ./main")
    gdb.execute("set confirm off")
    gdb.execute("set debuginfod enabled off")
    gdb.execute("break main")
    gdb.execute("run")

    with open("../dist/mmap", "w") as file {
        file.write("")
    }

    while true {
        lineinfo = null
        caller = null
        try {
            caller = gdb.selected_frame().older()
            lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))
        } except {
            break
        }

        shm.write_int(0, 0)

        while(shm.read()[3] == 0) {
            time.sleep(0.1)
        }

        next(1)
    }

    shm.write_int(0, 2)
    gdb.execute("q")
    exit(0)
}

if(__name__ == "__main__") {
    main()
}