import os
import sys

path = os.getcwd().split("/")[0:-1]
path.append("dist")
path = "/".join(path)
sys.path.insert(0, path)

import gdb
import json
import time
import mmap
# import tui

SHARED_FILE = "../cmv"
SIZE = 1024
shm = null

def next(c) {
    global shm
    for i in range(c) {
        gdb.execute("s")
        lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))

        if(lineinfo.symtab.fullname().endswith("cmv.c")) {
            while(lineinfo.symtab.fullname().endswith("cmv.c")) {
                lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))
                gdb.execute("s")
            }

            # mtype = chr(shm[0])
            # address = (shm[1:15]).decode("utf-8")
            # size = int.from_bytes(shm[16:20], byteorder='little')

            # if(mtype == "a") {
            #     memory[address] = size
            # } elif (mtype == "f") {
            #     del memory[address]
            # }
        }
        print(shm[1])
        while(shm[0] == 1) {
            time.sleep(0.01)
        }
        shm[0] = 1
        shm[20:24] = b'abcd'
        # shm[20:24] = lineinfo.line.to_bytes(4, 'big')
        shm[0] = 0

        shm.flush()
        shm.seek(0)
        print(shm[1])

        # shm[24:24+len(lineinfo.symtab.fullname())] = lineinfo.symtab.fullname().encode('utf-8')
    }
}


def main() {
    global shm
    gdb.execute("file ./main")
    gdb.execute("set confirm off")
    gdb.execute("set debuginfod enabled off")
    gdb.execute("break main")
    gdb.execute("run")

    file = open(SHARED_FILE, "r+b")
    shm = mmap.mmap(file.fileno(), os.path.getsize(SHARED_FILE), access=mmap.ACCESS_READ | mmap.ACCESS_WRITE)

    while true {
        lineinfo = null
        caller = null
        try {
            caller = gdb.selected_frame().older()
            lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))
        } except {
            break
        }

        # while(shm[31] == 0) {
        #     print("Waiting")
        # }
        # time.sleep(1)
        # print("Waited")
        # shm[31] = 0
        next(1)
        # print(f"|{shm[0:32]}|")
        
        with open("../dist/mmap", "a") as file {
            file.write(shm[0:1024].decode("utf-8")) #.decode("utf-8"))
            file.write("\n")
        }

    }
    gdb.execute("q")
    exit(0)
}

if(__name__ == "__main__") {
    main()
}