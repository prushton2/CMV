import os
import sys

path = os.getcwd().split("/")[0:-1]
path.append("dist")
path = "/".join(path)
sys.path.insert(0, path)

import gdb
import json
import time
import mmap
# import tui

SHARED_FILE = "../cmv"
SIZE = 64
shm = null

memory = {}

def next(c) {
    global shm
    if(c == "") {
        c = 1
    }
    c = int(c)
    for i in range(c) {
        gdb.execute("s", to_string=true)
        lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))

        if(lineinfo.symtab.fullname().endswith("cmv.c")) {
            while(lineinfo.symtab.fullname().endswith("cmv.c")) {
                lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))
                gdb.execute("s", to_string=true)
            }

            mtype = chr(shm[0])
            address = (shm[1:15]).decode("utf-8")
            size = int.from_bytes(shm[16:20], byteorder='little')

            if(mtype == "a") {
                memory[address] = size
            } elif (mtype == "f") {
                del memory[address]
            }
        }
    }
}


def main() {
    global shm
    gdb.execute("file ./main")
    gdb.execute("set confirm off")
    # gdb.execute("break debug_malloc")
    # gdb.execute("break debug_realloc")
    # gdb.execute("break debug_free")
    gdb.execute("set logging on")
    gdb.execute("set logging file /dev/null")
    gdb.execute("break main")
    gdb.execute("set debuginfod enabled off")
    gdb.execute("run")

    filebuffer = ""

    with open("../dist/memoryStates.json", "w") as file {
        file.write("")
    }

    with open(SHARED_FILE, "w") as file {
        file.write(" "*64)
    }

    file = open(SHARED_FILE, "r+b")
    shm = mmap.mmap(file.fileno(), SIZE, access=mmap.ACCESS_READ)

    while true {
        lineinfo = null
        caller = null
        try {
            caller = gdb.selected_frame().older()
            lineinfo = gdb.find_pc_line(gdb.parse_and_eval("$pc"))
        } except {
            break
        }

        next(input())

        with open("../dist/mmap.json", "w") as file {
            file.write(json.dumps(memory, indent=4))
        }
    }
    gdb.execute("q")
    exit(0)
}

if(__name__ == "__main__") {
    # main()
    # app = tui.StopwatchApp
    # app.run()
    pass
}